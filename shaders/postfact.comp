#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_shared_memory_block : enable

//
#include "include/hlsl_map.glsl"
#include "include/math.glsl"
#include "include/noire.glsl"
#include "include/raytracing.glsl"

//
layout (local_size_x = 32, local_size_y = 6, local_size_z = 1) in;

//
void main() {
    const vec3 bary = texelFetch(FBOF[framebuffers[1]], ivec3(gl_GlobalInvocationID.xy, 0), 0).xyz;
    const uvec4 sys = texelFetch(FBOU[framebuffers[0]], ivec3(gl_GlobalInvocationID.xy, 0), 0);

    //
    rayData.normal = f16vec4(0.f, 0.f, 0.5f, 0.f);
    rayData.diffuse = f16vec4(0.f.xxx, 1.f);
    rayData.surfaceNormal = normalize((modelView[0] * vec4(0.f, 0.f, 0.5f, 0.f)).xyz);
    rayData.bary = vec3(0.f.xxx);

    //
    vec4 _camera = divW(vec4((vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)/vec2(width, height)*2.f-1.f)*vec2(1.f, -1.f), 1.f, 1.f) * inverse(perspective));
    vec4 _origin = (_camera * modelViewInverse[0]);
    rayData.dir = normalize((modelView[0] * vec4(normalize(_camera.xyz), 0.f)).xyz);
    rayData.dir.y *= -1.f;
    rayData.origin = _origin;
    rayData.bary = bary;

    // fix broken skybox?
    if (!any(greaterThan(rayData.bary, 0.0001f.xxx))) {
        const vec4 env = texture(nonuniformEXT(sampler2D(textures[nonuniformEXT(backgroundImageView)], samplers[nonuniformEXT(linearSampler)])), lcts(rayData.dir));
        imageStore(SETF[storeSets[0]], ivec3(gl_GlobalInvocationID.xy, 0), vec4(env.xyz, 1.f));
    }
}
