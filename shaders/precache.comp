#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_shared_memory_block : enable
#extension GL_EXT_shader_atomic_float : enable

//
#include "include/hlsl_map.glsl"
#include "include/math.glsl"
#include "include/noire.glsl"
#include "include/raytracing.glsl"

//
layout (local_size_x = 32, local_size_y = 6, local_size_z = 1) in;

//
void main() {
    const uvec2 coord = gl_GlobalInvocationID.xy;
    const vec3 bary = framebufferLoadF(_BARY, ivec2(coord), 0).xyz;
    const uvec4 sys = framebufferLoadU(_INDICES, ivec2(coord), 0);
    const vec2 vcrd = (vec2(coord)+0.5f)/vec2(width, height);

    //
    vec3 dir = vec3(0.f);
    vec3 origin = vec3(0.f);

    //
    if (any(greaterThan(bary, 0.00001f.xxx))) {
        vec4 _ss = vec4((vcrd*2.f-1.f)*vec2(1.f, -1.f), framebufferLoadLinF(_BARY, vcrd, 0).w, 1.f);
        vec4 _camera = unss(_ss);
        origin = (_camera * modelViewInverse[0]).xyz;
        dir = normalize((modelView[0] * vec4(normalize(_camera.xyz), 0.f)).xyz);

        //
        imageSetStoreF(_DFACTOR, ivec2(coord), vec4(0.f.xxxx), 0);
    } else {
        vec4 _camera = unss(vec4((vcrd*2.f-1.f)*vec2(1.f, -1.f), 1.f, 1.f));
        vec4 _origin = (_camera * modelViewInverse[0]);
        dir = normalize((modelView[0] * vec4(normalize(_camera.xyz), 0.f)).xyz);
        origin = _origin.xyz;

        //
        imageSetStoreF(_DFACTOR, ivec2(coord), vec4(1.f.xxxx), 0);
    }

    //
    imageSetStoreF(_DFACTOR, ivec2(coord), vec4(0.f.xxxx), 1);
    imageSetStoreF(_DFACTOR, ivec2(coord), vec4(0.f.xxxx), 2);

    //
    RayTracedData rayData = getData(origin.xyz, dir.xyz, sys, bary, 0.f, -1);

    // make a background, needs reproject from previous
    for (int i=0;i<3;i++) {
        imageSetStoreF(_DFILTER, ivec2(coord), vec4(0.f), i);
        imageSetStoreF(_DREPROJ, ivec2(coord), vec4(0.f), i);
        imageSetAtomicStoreU2(_UATOMIC, ivec2(coord), uvec2(0), i);
    }

    // to be have history data
    imageSetStoreF(_PRECISE, ivec2(coord), vec4(origin.xyz, 1.f), 0);
    imageSetStoreF(_PRECISE, ivec2(coord), min16float4(rayData.normal.xyz, 0.0), 1);

    // doesn't have history data
    imageSetStoreF(_DOTHERS, ivec2(coord), max(rayData.diffuse, 0.f.xxxx), 0);
    imageSetStoreF(_DOTHERS, ivec2(coord), max(rayData.emissive, 0.f.xxxx), 1);
    imageSetStoreF(_DOTHERS, ivec2(coord), max(rayData.transmission, 0.f.xxxx), 2);
    imageSetStoreF(_DOTHERS, ivec2(coord), min16float4(rayData.TBN[0].xyz, 0.0), 3);
    imageSetStoreF(_DOTHERS, ivec2(coord), min16float4(rayData.TBN[1].xyz, 0.0), 4);
    imageSetStoreF(_DOTHERS, ivec2(coord), min16float4(rayData.TBN[2].xyz, 0.0), 5);

    //
    const float tcoef = mix(1.f, rayData.transmission.x, rayData.diffuse.a);
    imageSetStoreF(_METAPBR, ivec2(coord), vec4(max(1.f - rayData.PBR.r, 0.f) * (1.f - tcoef), 1.f          , 0.f          , 0.f), 0); // diffuse, indirect, shadows
    imageSetStoreF(_METAPBR, ivec2(coord), vec4(rayData.PBR.r                                , rayData.PBR.g, 0.f          , 0.f), 1); // reflection, mirror, glossy
    imageSetStoreF(_METAPBR, ivec2(coord), vec4(tcoef                                        , 0.f          , 0.f          , 0.f), 2); // tranparency, transmission
    imageSetStoreF(_METAPBR, ivec2(coord), vec4(rayData.PBR.r                                , rayData.PBR.g, rayData.PBR.b, 0.f), 3); // general, generic
}
