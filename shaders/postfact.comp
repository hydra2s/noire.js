#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_shared_memory_block : enable
#extension GL_EXT_shader_atomic_float : enable

//
#include "include/hlsl_map.glsl"
#include "include/math.glsl"
#include "include/noire.glsl"
#include "include/raytracing.glsl"

//
layout (local_size_x = 32, local_size_y = 6, local_size_z = 1) in;

//
vec4 upto(in vec4 samples, in float to) {
    const float scnt = samples.w;
    samples  = samples/max(scnt, 0.0001f);
    samples  = min(samples, 16.f);
    samples *= min(scnt, to);
    return samples;
}

//
void main() {
    for (int i=0;i<3;i++) {
        uvec2 coord = gl_GlobalInvocationID.xy;
        uvec2 hashed = imageSetAtomicLoadU2(_UATOMIC, ivec2(coord), i);

        //
        bool isValid = pack32(u16vec2(hashed)) > 0;

        //
        vec4 colC = imageSetLoadF(_DFACTOR, ivec2(coord), i);
        vec4 colR = isValid ? imageSetLoadPrevF(_DFACTOR, ivec2(hashed), i) : 0.f.xxxx;

        //
        imageSetStoreF(_DFACTOR, ivec2(coord), upto(colC/max(colC.w, 0.0001f) + colR, 1024.f) /*filterComp(ivec2(coord), i)*/, i);
        imageSetStoreF(_DFILTER, ivec2(coord), upto(colC/max(colC.w, 0.0001f) + colR, 1024.f) /*filterComp(ivec2(coord), i)*/, i);

        //
        vec4 cT = imageSetLoadF(_DREPROJ, ivec2(coord), i);
        vec4 rT = imageSetLoadPrevF(_DREPROJ, ivec2(coord), i);
        imageSetStoreF(_DREPROJ, ivec2(coord), vec4(max( cT.r , rT.r )), i);
    }
}
