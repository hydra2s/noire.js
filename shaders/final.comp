#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_shared_memory_block : enable

//
#include "include/math.glsl"
#include "include/noire.glsl"
#include "include/raytracing.glsl"

//
layout (local_size_x = 32, local_size_y = 6, local_size_z = 1) in;
//texture2DArray
//

//
void main() {
    // TODO: linear interpolation support (virtual sampler)
    vec2 center =  (vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y) + 0.5f) / vec2(windowWidth, windowHeight);
    float variance = max((imageLoad(SETF[loadSets[0]], ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 0))).w, 1.f);
    vec3 fcolor = (imageLoad(SETF[loadSets[0]], ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 0))).xyz;//divW(tex2DBiLinear(0, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y))).xyz;//smartDeNoise(3, center, 7.f, 1.f, 3.f).xyz;//tex2DBiLinear(3, center).xyz;
    //fcolor = fcolor * 0.5f + 0.5f;

    //
    imageStore(SWAP[imageIndex], ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(fcolor, 1.f));
}
