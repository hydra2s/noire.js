#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_shared_memory_block : enable
#extension GL_EXT_shader_atomic_float : enable

//
#include "include/hlsl_map.glsl"
#include "include/math.glsl"
#include "include/noire.glsl"
#include "include/raytracing.glsl"

//
layout (local_size_x = 32, local_size_y = 6, local_size_z = 1) in;

//
vec4 upto(in vec4 samples, in float to) {
    const float scnt = samples.w;
    samples  = samples/max(scnt, 0.0001f);
    samples  = min(samples, 64.f);
    samples *= min(scnt, to);
    return samples;
}

//
void main() {
    for (int i=0;i<3;i++) {
        uvec2 coord = gl_GlobalInvocationID.xy;
        vec4 wpos = imageSetLoadF(_DOTHERS, ivec2(coord), 6+i);
        vec4 origin = divW((vec4(wpos.xyz, 1.f) * modelView[0]) * perspective);

        //
        origin.y *= -1.f;
        origin.xy = origin.xy * 0.5f + 0.5f;

        //
        vec4 colC = imageSetLoadF(_DFACTOR, ivec2(coord), i);
        vec4 bary = framebufferLoadLinF(_BARY, origin.xy, 0);
        bool validUV = abs(bary.w - origin.z) < 0.0001f && !all(lessThanEqual(abs(wpos.xyz), 0.0001f.xxx));

        // re-use image space sample from current RT
        // currently, isn't support transmission backlayers
        const vec4 MULT    = validUV ? vec4(max(imageSetLoadLinF(_DOTHERS, origin.xy, 0).xyz, 0.0001f.xxx), 1.f) : vec4(0.f.xxx, 0.f);
        const vec4 EMIS    = validUV ? vec4(max(imageSetLoadLinF(_DOTHERS, origin.xy, 1).xyz, 0.0001f.xxx), 1.f) : vec4(0.f.xxx, 0.f);
        const float coef   = imageSetLoadLinF(_METAPBR, origin.xy, 0).r;
        const vec4 rcolor  = imageSetLoadLinF(_DFACTOR, origin.xy, 0);
        const vec4 fcolor  = vec4(rcolor.xyz/max(rcolor.w, 0.0001f), sign(rcolor.w)) * coef * vec4(MULT.xyz, 1.f) + vec4(EMIS.xyz, 0.f);

        //
        imageSetStoreF(_DFACTOR, ivec2(coord), upto(colC + fcolor, 1024.f) /*filterComp(ivec2(coord), i)*/, i);
        imageSetStoreF(_DFILTER, ivec2(coord), upto(colC + fcolor, 1024.f) /*filterComp(ivec2(coord), i)*/, i);
    }
}
