#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_shared_memory_block : enable
#extension GL_EXT_shader_atomic_float : enable
#extension GL_EXT_control_flow_attributes : enable

//
#include "include/hlsl_map.glsl"
#include "include/math.glsl"
#include "include/noire.glsl"
#include "include/raytracing.glsl"

//
layout (local_size_x = 32, local_size_y = 6, local_size_z = 1) in;


// here, the denoising kernel stride ranges from 1.0 to 4.0
#define DENOISE_RANGE vec2(1, 4)

float hash1(float seed) {
    return fract(sin(seed)*43758.5453123);
}


const vec2 offset[25] = {
  vec2(-2,-2),
  vec2(-1,-2),
  vec2(0,-2),
  vec2(1,-2),
  vec2(2,-2),

  vec2(-2,-1), 
  vec2(-1,-1), 
  vec2(0,-1), 
  vec2(1,-1),
  vec2(2,-1),

  vec2(-2,0),
  vec2(-1,0),
  vec2(0,0),
  vec2(1,0),
  vec2(2,0),

  vec2(-2,1),
  vec2(-1,1),
  vec2(0,1),
  vec2(1,1),
  vec2(2,1),

  vec2(-2,2),
  vec2(-1,2),
  vec2(0,2),
  vec2(1,2),
  vec2(2,2)
};

const float kernel[25] = {
  1.0f/256.0f,
  1.0f/64.0f,
  3.0f/128.0f,
  1.0f/64.0f,
  1.0f/256.0f,

  1.0f/64.0f,
  1.0f/16.0f,
  3.0f/32.0f,
  1.0f/16.0f,
  1.0f/64.0f,

  3.0f/128.0f,
  3.0f/32.0f,
  9.0f/64.0f,
  3.0f/32.0f,
  3.0f/128.0f,

  1.0f/64.0f,
  1.0f/16.0f,
  3.0f/32.0f,
  1.0f/16.0f,
  1.0f/64.0f,

  1.0f/256.0f,
  1.0f/64.0f,
  3.0f/128.0f,
  1.0f/64.0f,
  1.0f/256.0f
};

//
vec4 filterComp(in ivec2 coord, in int type) {
    vec3 sum = vec3(0.0);
    vec3 sum_f = vec3(0.0);
    float c_phi = 1.0;
    float r_phi = 1.0;
    float n_phi = 0.5;
    float p_phi = 0.25;

    uvec2 hashed = imageSetAtomicLoadU2(_UATOMIC, ivec2(coord), type);

	vec4 cval = imageSetLoadF(_DIFFUSE, ivec2(coord), type);
    vec4 rval = pack32(u16vec2(hashed)) > 0 ? imageSetLoadPrevF(_DIFFUSE, ivec2(coord), type) : 0.f.xxxx;
	vec3 nval = imageSetLoadF(_DOTHERS, ivec2(coord), 2).xyz;

    float ang = 2.0*3.1415926535*hash1(251.12860182*coord.x + 729.9126812*coord.y+5.1839513*frameCount);
	mat2 m = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));

    float cum_w = 0.f;//cval.w;
    float cum_fw = 0.f;//rval.w;

    float denoiseStrength = (DENOISE_RANGE.x + (DENOISE_RANGE.y-DENOISE_RANGE.x)*hash1(641.128752*coord.x + 312.321374*coord.y+1.92357812*frameCount));

    [[unroll]] for(int i=0; i<25; i++)
    {
        vec2 px = vec2(coord)+m*(offset[i]* denoiseStrength);
        vec2 uv = px/vec2(width, height);

        vec4 ctmp = imageSetLoadLinF(_DIFFUSE, uv, type);
        vec4 t = cval/max(cval.w, 0.001f) - ctmp/max(ctmp.w, 0.001f);
        float dist2 = dot(t.xyz,t.xyz);
        float c_w = max(min(exp(-(dist2)/c_phi), 1.0), 0.001f);

        vec3 ntmp = imageSetLoadLinF(_DOTHERS, uv, 2).xyz;
        t = vec4(nval - ntmp, 0.f);
        dist2 = max(dot(t.xyz,t.xyz), 0.0);
        float n_w = max(min(exp(-(dist2)/n_phi), 1.0), 0.001f);

        uvec2 hashed = imageSetAtomicLoadU2(_UATOMIC, ivec2(px), type);
        vec4 rtmp = pack32(u16vec2(hashed)) > 0 ? imageSetLoadPrevF(_DIFFUSE, ivec2(hashed), type) : 0.f.xxxx;
        t = rval/max(rval.w, 0.001f) - rtmp/max(rtmp.w, 0.001f);
        dist2 = dot(t.xyz,t.xyz);
        float r_w = max(min(exp(-(dist2)/r_phi), 1.0), 0.001f);

        // new denoised frame
        float weight0 = c_w*n_w;
        sum += ctmp.xyz*weight0*kernel[i];
        cum_w += weight0*kernel[i]*ctmp.w;

        // denoise the previous denoised frame again
        float weight1 = r_w*n_w;
        sum_f += rtmp.xyz*weight1*kernel[i];
        cum_fw += weight1*kernel[i]*rtmp.w;
    }

    // mix in more of the just-denoised frame if it differs significantly from the
    // frame from feedback
    vec4 ptmp = rval;
    vec3 t = sum/max(cum_w, 0.001f) - ptmp.xyz/max(ptmp.w, 0.001f);
    float dist2 = dot(t,t);
    float p_w = min(exp(-(dist2)/p_phi), 1.0);

    //
    vec4 mixed = mix(vec4(sum.xyz, cum_w),vec4(sum_f.xyz, cum_fw), p_w/*max(p_w, max(1.f - cum_w, 0.f))*/);
    return vec4(mixed.xyz/max(mixed.w, 0.001f), 1.f);
}

//
void main() {
    for (int i=0;i<2;i++) {
        uvec2 coord = gl_GlobalInvocationID.xy;

        //
        imageSetStoreF(_DIFFUSE, ivec2(coord), filterComp(ivec2(coord), i), 2+i);
    }
}
