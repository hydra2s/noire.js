#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_shared_memory_block : enable
#extension GL_EXT_shader_atomic_float : enable

//
#include "include/hlsl_map.glsl"
#include "include/math.glsl"
#include "include/noire.glsl"
#include "include/raytracing.glsl"

//
layout (local_size_x = 32, local_size_y = 6, local_size_z = 1) in;

//
void main() {
    // TODO: linear interpolation support (virtual sampler)
    ivec2 coord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    vec4 fcolor = vec4(0.f.xxx, 0.f);
    for (int i=0;i<3;i++) {
        const vec4 MULT    = i == 0 ? vec4(max(imageSetLoadF(_DOTHERS, coord, 0).xyz, 0.001f.xxx), 1.f) : vec4(1.f.xxx, 1.f);
        const float coef   = imageSetLoadF(_METAPBR, coord, i).r;
        const vec4 rcolor  = imageSetLoadF(_DFILTER, coord, i);
                   fcolor += vec4(rcolor.xyz / max(rcolor.w, 0.001f) * coef * MULT.xyz, 1.f);
    }
    //fcolor = vec4(imageSetAtomicLoadF(_FATOMIC, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), 1, 0));

    //
    imageStore(SWAP[imageIndex], coord, vec4(pow(fcolor.xyz, 1.f.xxx/2.2f), 1.f));
}
