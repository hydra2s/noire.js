#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_shared_memory_block : enable

//
#include "include/hlsl_map.glsl"
#include "include/math.glsl"
#include "include/noire.glsl"
#include "include/raytracing.glsl"

//
layout (local_size_x = 32, local_size_y = 6, local_size_z = 1) in;

//
void main() {
    //
    rasterize(gl_GlobalInvocationID.xy);//

    //
    GIData GI = globalIllumination(/*, data.origin.xyz + worldNormal * epsilon, data.origin.xyz + worldNormal * epsilon + reflDir * 10000.f, reflDir*/);

    //
    vec3 fcolor = GI.color.xyz;
    ivec3 coord = ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 0);

    //
    imageStore(SETF[storeSets[0]], coord, vec4(fcolor, 1.f));

    //imageStore(SETF[loadSets[1]], coord, vec4(0.f.xxx, 1.f));
    //imageStore(SETF[loadSets[2]], coord, texelFetch(FBOU[framebuffers[2]], coord, 0));
    //imageStore(SETF[loadSets[3]], coord, texelFetch(FBOU[framebuffers[3]], coord, 2) + texelFetch(FBOU[framebuffers[3]], coord, 0));
}
